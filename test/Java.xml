<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="Java.java"><class>class <name>ExternalFunctions</name> <block>{
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>externalFunction</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"This is an external function call."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>anotherExternalFunction</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Received string: "</literal> <operator>+</operator> <name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>
}</block></class>

<class>class <name>AnotherClass</name> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>anotherDataMember</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>AnotherClass</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>anotherDataMember</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>display</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"AnotherClass data member: "</literal> <operator>+</operator> <name><name>this</name><operator>.</operator><name>anotherDataMember</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>
}</block></class>

<class>class <name>MyClass</name> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>dataMember</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>otherDataMember</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>MyClass</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>strValue</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>dataMember</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>otherDataMember</name></name> <operator>=</operator> <name>strValue</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Constructor called with value: "</literal> <operator>+</operator> <name>value</name> <operator>+</operator> <literal type="string">" and strValue: "</literal> <operator>+</operator> <name>strValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <constructor><specifier>public</specifier> <name>MyClass</name><parameter_list>(<parameter><decl><type><name>MyClass</name></type> <name>other</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>dataMember</name></name> <operator>=</operator> <name><name>other</name><operator>.</operator><name>dataMember</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>otherDataMember</name></name> <operator>=</operator> <name><name>other</name><operator>.</operator><name>otherDataMember</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Copy constructor called."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>emptyMethod</name><parameter_list>()</parameter_list> <block>{<block_content>
        <comment type="line">// This method intentionally left blank</comment>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>displayNonDataMember</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>ExternalFunctions</name><operator>.</operator><name>anotherExternalFunction</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>otherDataMember</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>wrapExternalFunction</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>ExternalFunctions</name><operator>.</operator><name>externalFunction</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>MyClass</name></type> <name>createObject</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>strValue</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>MyClass</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>strValue</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getNonPrimitiveDataMember</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name><name>this</name><operator>.</operator><name>otherDataMember</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>getDataMember</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name><name>this</name><operator>.</operator><name>dataMember</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isDataMemberPositive</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name><name>this</name><operator>.</operator><name>dataMember</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>doubleDataMember</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name><name>this</name><operator>.</operator><name>dataMember</name></name> <operator>*</operator> <literal type="number">2</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>addDataMember</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>param</name> <operator>+=</operator> <name><name>this</name><operator>.</operator><name>dataMember</name></name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>callOnLocalObject</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>MyClass</name></type> <name>localObj</name> <init>= <expr><operator>new</operator> <call><name>MyClass</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>localObj</name><operator>.</operator><name>getDataMember</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>callOnLocalObjectOfAnotherClass</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>AnotherClass</name></type> <name>localObj</name> <init>= <expr><operator>new</operator> <call><name>AnotherClass</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>localObj</name><operator>.</operator><name>display</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>changeManyAttributes</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>newValue</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>newStrValue</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>dataMember</name></name> <operator>=</operator> <name>newValue</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>otherDataMember</name></name> <operator>=</operator> <name>newStrValue</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>changeAttribute</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>newValue</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>dataMember</name></name> <operator>=</operator> <name>newValue</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>doLocalComputation</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>numbers</name> <init>= <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>num</name> <range>: <expr><name>numbers</name></expr></range></decl></init>)</control> <block>{<block_content>
            <expr_stmt><expr><name>sum</name> <operator>+=</operator> <name>num</name></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Sum of local numbers: "</literal> <operator>+</operator> <name>sum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDataMember</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>dataMember</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>dataMember</name></name> <operator>=</operator> <name>dataMember</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getOtherDataMember</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name><name>this</name><operator>.</operator><name>otherDataMember</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setOtherDataMember</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>otherDataMember</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>otherDataMember</name></name> <operator>=</operator> <name>otherDataMember</name></expr>;</expr_stmt>
    </block_content>}</block></function>
}</block></class>

<class>class <name>C</name> <block>{
    <decl_stmt><decl><type><specifier>protected</specifier> <name>int</name></type> <name>dataC</name></decl>;</decl_stmt>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>getDataC</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>dataC</name></expr>;</return>
    </block_content>}</block></function>
}</block></class>

<class>class <name>B</name> <super_list><extends>extends <super><name>C</name></super></extends></super_list> <block>{
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getDataB</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>dataC</name></expr>;</return>
    </block_content>}</block></function>
}</block></class>

<class>class <name>A</name> <super_list><extends>extends <super><name>B</name></super></extends></super_list> <block>{
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getDataA</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>dataC</name></expr>;</return>
    </block_content>}</block></function>
}</block></class>

<enum>enum <name>Day</name> <block>{
    <decl><name>MONDAY</name><argument_list>(<argument><expr><literal type="string">"Start of the work week"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></decl>,
    <decl><name>TUESDAY</name><argument_list>(<argument><expr><literal type="string">"Second day of the work week"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></decl>,
    <decl><name>WEDNESDAY</name><argument_list>(<argument><expr><literal type="string">"Midweek"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></decl>,
    <decl><name>THURSDAY</name><argument_list>(<argument><expr><literal type="string">"Almost the weekend"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></decl>,
    <decl><name>FRIDAY</name><argument_list>(<argument><expr><literal type="string">"End of the work week"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></decl>,
    <decl><name>SATURDAY</name><argument_list>(<argument><expr><literal type="string">"Weekend"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>,
    <decl><name>SUNDAY</name><argument_list>(<argument><expr><literal type="string">"Weekend"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;

    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>description</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>workingHours</name></decl>;</decl_stmt>

    <constructor><name>Day</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>description</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>workingHours</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>description</name></name> <operator>=</operator> <name>description</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>workingHours</name></name> <operator>=</operator> <name>workingHours</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDescription</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>description</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>description</name></name> <operator>=</operator> <name>description</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getDescription</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>description</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setWorkingHours</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>workingHours</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>workingHours</name></name> <operator>=</operator> <name>workingHours</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>getWorkingHours</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>workingHours</name></expr>;</return>
    </block_content>}</block></function>
}</block></enum>

<class><specifier>public</specifier> class <name>Program</name> <block>{
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></parameter>)</parameter_list> <block>{<block_content>
        
    </block_content>}</block></function>
}</block></class></unit>
